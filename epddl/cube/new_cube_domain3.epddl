(define (domain cube-3)
	(:types pos)
	(:predicates (x ?p - pos)
	             (y ?p - pos)
				 (z ?p - pos)  
	)
    
	(:action senseGold
	 :parameters ()
	 :precondition (K (and (x p2) (y p2) (z p2)))
	 :observe (gold)
	)
	
	(:action pickGold
	 :parameters ()
	 :precondition (K (gold))
	 :effect (((True), (x p1, y p1, z p1)))
	)
	
	(:action pickToy
	 :parameters ()
	 :precondition (K (not (gold)))
	 :effect (((True), (x p3, y p3, z p3)))
	)
	
	(:action right
	 :parameters()
     :precondition (K (True))
     :effect (((x p1), (x p2, not (x p1)))
			  ((x p2), (x p3, not (x p2)))
             )
    )
  
	(:action left
	 :parameters()
     :precondition (K (True))
     :effect (((x p2), (x p1, not (x p2)))
			  ((x p3), (x p2, not (x p3)))
             )
    )     
       
	(:action down
	 :parameters ()
     :precondition (K (True))	
     :effect (((y p1), (y p2, not (y p1)))
			  ((y p2), (y p3, not (y p2))) 
             )
    )
         
	(:action up
     :parameters ()
     :precondition (K (True))
     :effect (((y p2), (y p1, not (y p2)))
			  ((y p3), (y p2, not (y p3)))
             )
    )     
      
	(:action out
	 :parameters()
     :precondition (K (True))
     :effect (((z p1), (z p2, not (z p1)))
			  ((z p2), (z p3, not (z p2)))
             )
    )
	  
	(:action in
	 :parameters()
     :precondition (K (True))
     :effect (((z p2), (z p1, not (z p2)))
			  ((z p3), (z p2, not (z p3)))
             )
    )      
)

