(define (domain farmer)
  	(:types)
  	(:predicates)

    (:action double
     :parameters ()
     :precondition (K (True))
     :observe (d)
    )
     
	(:action left
	 :parameters ()
	 :precondition (K (not (fl)))
	 :effect (((True),(fl))
	          ((wi, wa, si, sa, not(wl), not(sl)), (not (sa)))
	          ((si, sa, ci, ce, not(sl), not(cl)), (not (ce)))
	         )
	)
	
	(:action wleft
	 :parameters()
	 :precondition (K (and (not (fl)) (not(d))))
	 :effect (((True),(fl))
	          ((wi, wa, not(wl)), (wl))
			  ((si, sa, ci, ce, sl, cl), (not (ce)))
			  ((si, sa, ci, ce, not(sl), not(cl)), (not (ce)))
			  )
	)
	
	(:action sleft
	 :parameters()
	 :precondition (K (and (not (fl)) (not(d))))
	 :effect (((True), (fl))
	          ((si, sa, not(sl)), (sl))
			 )	
	)
	
	(:action cleft
	 :parameters()
	 :precondition (K (and (not (fl)) (not(d))))
	 :effect (((True), (fl))
	          ((ci, ce, not(cl)), (cl))
			  ((wi, wa, si, sa, wl, sl), (not(sa)))
			  ((wi, wa, si, sa, not(wl), not(sl)), (not (sa)))
	         )
	)
	
	(:action wsleft
	 :parameters()
	 :precondition (K (and (not (fl)) (d)))
	 :effect (((True), (fl))
	          ((wi, wa, not (wl)), (wl))
			  ((si, sa, not (sl)), (sl))
			 )
	 )
	 
	(:action csleft
	 :parameters()
	 :precondition (K (and (not (fl)) (d)))
	 :effect (((True), (fl))
	          ((si, sa, not (sl)), (sl))
			  ((ci, ce, not (cl)), (cl))
	         ) 
	 )
	 
	(:action cwleft
	 :parameters()
	 :precondition (K (and (not (fl)) (d)))
	 :effect (((True), (fl))
	          ((wi, wa, not (wl)), (wl))
			  ((ci, ce, not (cl)), (cl))
	         )
	)
	
	(:action right
	 :parameters()
	 :precondition (K (fl))
	 :effect (((True), (not (fl)))
	          ((wi, wa, si, sa, wl, sl), (not (sa)))
	          ((si, sa, ci, ce, sl, cl), (not (ce)))
	         )
	)
	
	(:action wright
	 :parameters()
	 :precondition (K (and (fl) (not(d))))
	 :effect (((True), (not (fl)))
	          ((wi, wa, wl), (not (wl)))
			  ((si, sa, ci, ce, not(sl), not(cl)), (not (ce)))
			  ((si, sa, ci, ce, sl, cl), (not(ce)))
			 )
	)
	
	(:action sright
	 :parameters()
	 :precondition (K  (and(fl) (not(d)))) 
	 :effect (((True), (not (fl)))
	          ((si, sa, sl), (not (sl)))
			 )
	)
	
	(:action cright
	 :parameters()
	 :precondition (K (and (fl) (not(d))))
	 :effect (((True), (not (fl)))
	          ((ci, ce, cl), (not (cl)))
			  ((wi, wa, si, sa, wl, sl), (not (sa)))
			  ((wi, wa, si, sa, not(wl), not (sl)), (not (sa)))
			 )
	)
	
	(:action wsright
	 :parameters()
	 :precondition (K (and (fl) (d)))
	 :effect (((True), (not (fl)))
	          ((wi, wa, wl), (not (wl)))
			  ((si, sa, sl), (not (sl)))
			 ) 
	)
	
	(:action csright
	 :parameters()
	 :precondition (K (and (fl) (d)))
	 :effect (((True), (not (fl)))
	          ((si, sa, sl), (not (sl)))
			  ((ci, ce, cl), (not (cl)))
			 )
	)
	
	(:action cwright
	 :parameters()
	 :precondition (K (and (fl) (d)))
	 :effect (((True), (not (fl)))
	          ((wi, wa, wl), (not (wl)))
			  ((ci, ce, cl), (not (cl)))
			 )
	)
)
