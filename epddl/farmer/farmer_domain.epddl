(define (domain farmer)
    (:types)
    (:predicates)

    (:action double
     :parameters ()
     :precondition (True)
     :observe (d)
     )
     
	(:action left
	 :parameters ()
	 :precondition (K (not (fl)))
	 :effect (((True),(fl)))
	)
	
	(:action wleft
	 :parameters()
	 :precondition (and (K (not (fl))) (DK (not (d))))
	 :effect (((True), (fl))
	          ((wa, not (wl)), (wl))
			  ((sa, re, sl, rl), (not (re)))
			  ((sa, re, not (sl), not (rl)), (not (re)))
			  )
	)
	
	(:action sleft
	 :parameters()
	 :precondition (and (K (not (fl))) (DK (not (d))))
	 :effect (((True), (fl))
	          ((sa, not (sl)), (sl))
			  )	
	)
	
	(:action rleft
	 :parameters()
	 :precondition (and (K (not (fl))) (DK (not (d))))
	 :effect (((True), (fl))
	          ((re, not (rl)), (rl))
			  ((wa, sa, wl, sl), (not (sa)))
			  ((wa, sa, not (wl), not (sl)), (not (sa)))
	         )
	)
	
	(:action wsleft
	 :parameters()
	 :precondition (K (and (not (fl)) (d)))
	 :effect (((True), (fl))
	          ((wa, not (wl)), (wl))
			  ((sa, not (sl)), (sl))
			 )
	 )
	 
	(:action rsleft
	 :parameters()
	 :precondition (K (and (not (fl)) (d)))
	 :effect (((True), (fl))
	          ((sa, not (sl)), (sl))
			  ((re, not (rl)), (rl))
	         ) 
	 )
	 
	(:action rwleft
	 :parameters()
	 :precondition (K (and (not (fl)) (d)))
	 :effect (((True), (fl))
	          ((wa, not (wl)), (wl))
			  ((re, not (rl)), (rl))
	         )
	)
	
	(:action right
	 :parameters()
	 :precondition (K (fl))
	 :effect (((True), (not (fl)))
	         )
	)
	
	(:action wright
	 :parameters()
	 :precondition (and (K (fl)) (DK (not (d))))
	 :effect (((True), (not (fl)))
	          ((wa, wl), (not (wl)))
			  ((sa, re, not (sl), not (rl)), (not (re)))
			  ((sa, re, sl, rl), (not (re)))
			 )
	)
	
	(:action sright
	 :parameters()
	 :precondition (and (K (fl)) (DK (not (d))))
	 :effect (((True), (not (fl)))
	          ((sa, sl), (not (sl)))
			 )
	)
	
	(:action rright
	 :parameters()
	 :precondition (and (K (fl)) (DK (not (d))))
	 :effect (((True), (not (fl)))
	          ((re, rl), (not (rl)))
			  ((wa, sa, wl, sl), (not (sa)))
			  ((wa, sa, not (wl), not (sl)), (not (sa)))
			 )
	)
	
	(:action wsright
	 :parameters()
	 :precondition (K (and (fl) (d)))
	 :effect (((True), (not (fl)))
	          ((wa, wl), (not (wl)))
			  ((sa, sl), (not (sl)))
			 ) 
	)
	
	(:action rsright
	 :parameters()
	 :precondition (K (and (fl) (d)))
	 :effect (((True), (not (fl)))
	          ((sa, sl), (not (sl)))
			  ((re, rl), (not (rl)))
			 )
	)
	
	(:action rwright
	 :parameters()
	 :precondition (K (and (fl) (d)))
	 :effect (((True), (not (fl)))
	          ((wa, wl), (not (wl)))
			  ((re, rl), (not (rl)))
			 )
	)
)
