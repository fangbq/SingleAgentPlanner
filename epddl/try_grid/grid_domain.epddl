(define (domain grid)
    (:types POS SHAPE KEY)
	(:predicates (conn ?x ?y)
                 (key-shape ?k ?s)
                 (lock-shape ?x ?s)
                 (at ?r ?x )
	             (at-robot ?x)
                 (place ?p)
                 (key ?k)
                 (shape ?s)
                 (locked ?x)
                 (holding ?k)
                 (open ?x)
                 (arm-empty)
    )

	(:action sense-lock-shape
	 :parameters (?curpos - POS ?lockpos - POS ?shape - SHAPE)
	 :precondition (K (and (place ?curpos) 
	                       (place ?lockpos) 
						   (shape ?shape)
                           (conn ?curpos ?lockpos) 
						   (at-robot ?curpos)
					   )
					)
	 :observe (lock-shape ?lockpos ?shape)
	)

	(:action unlock
	 :parameters (?curpos - POS ?lockpos - POS ?key - KEY ?shape - SHAPE)
     :precondition (K (and (place ?curpos)
	                       (place ?lockpos) 
						   (key ?key) 
						   (shape ?shape)
                           (conn ?curpos ?lockpos) 
						   (key-shape ?key ?shape)
                           (at-robot ?curpos) 
                           (holding ?key)
					   )
				    )
     :effect (((lock-shape ?lockpos ?shape), (open ?lockpos, not (locked ?lockpos))))
	)

	(:action move
	 :parameters (?curpos - POS ?nextpos - POS)
	 :precondition (K (and (place ?curpos) 
	                       (place ?nextpos)
                           (at-robot ?curpos)
						   (conn ?curpos ?nextpos) 
						   (open ?nextpos)
					   )
					)
	 :effect (((True), (at-robot ?nextpos, not (at-robot ?curpos))))
	)

	(:action pickup
	 :parameters (?curpos - POS ?key - KEY)
	 :precondition (K (and (place ?curpos) 
	                       (key ?key) 
                           (at-robot ?curpos) 
						   (at ?key ?curpos) 
						   (arm-empty )
					   )
					)
	 :effect (((True), (holding ?key, not (at ?key ?curpos, arm-empty))))
	)

	(:action putdown
	 :parameters (?curpos - POS ?key - KEY)
	 :precondition (K (and (place ?curpos) 
	                       (key ?key) 
                           (at-robot ?curpos) 
						   (holding ?key)
					   )
					)
	 :effect (((True), (arm-empty, at ?key ?curpos, not (holding ?key))))
	)
)
