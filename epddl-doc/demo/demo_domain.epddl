(define (domain demo)
  (:types)
  (:predicates
    (at ?i ?j - pos)
  )
   
  (:action senseL
   :parameters (?i - pos)
   :precondition (and (DK (at ?i)) 
   					  (DK (not (lightOn)))
   				 )
   :observe (lightOn)
  )
  
  (:action senseD
   :parameters ()
   :precondition (K (hasKnocked))
   :observe (doorOpen)
  )
  
  (:action knock
   :parameters ()
   :precondition (K (lightOn))
   :effect (
            ((inRoom), (doorOpen, hasKnocked))
            ((not (inRoom)), (hasKnocked, not(doorOpen)))
           )
  )

)
